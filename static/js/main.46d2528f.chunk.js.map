{"version":3,"sources":["components/Select.tsx","data/api.ts","components/Input.tsx","App.tsx","Page.tsx","serviceWorker.ts","index.tsx"],"names":["defaultOption","options","onChange","text","value","className","e","target","map","option","client","Wretch","url","process","Input","label","type","placeholder","required","App","useState","coursesData","setCoursesData","termsData","setTermsData","componentData","setComponentData","term","setTerm","course","setCourse","email","setEmail","captcha","setCaptcha","selectedSections","setSelectedSections","color","message","open","notification","setNotification","loadComponents","get","json","getCourse","then","data","components","catch","error","handleSelection","section","includes","length","alert","concat","filter","s","useEffect","sort","i","getCourses","id","onClick","Select","Object","keys","c","cmp_type","status","filled","maximum","times","onSubmit","preventDefault","sections","post","postSubmission","style","textAlign","sitekey","onExpired","Page","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.46d2528f.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface Props {\n    defaultOption?: Option;\n    options: Option[];\n    onChange?: Function;\n}\n\nexport interface Option {\n    value: string; \n    text: string;\n}\n\nexport default function({ defaultOption, options, onChange }: Props) {\n    if (!defaultOption) \n        defaultOption = {\n            text: \"Select\",\n            value: \"\",\n        };\n\n    return (\n        <div className=\"select\">\n            <select onChange={(e) => onChange ? onChange(e.target.value) : null}>\n                <option value={defaultOption.value}>{defaultOption.text}</option>\n                {options.map((option) => (\n                    <option key={option.value} value={option.value}>{option.text}</option>\n                ))}\n            </select>\n        </div>\n    );\n}","import Wretch from \"wretch\";\nimport { CoursesResponse, CourseReponse, TermsResponse } from \"./responses\";\n\nconst API_URL = process.env.REACT_APP_API_URL || \"\";\n\nconst client = Wretch()\n  .url(API_URL);\n\nexport function getTerms(): Promise<TermsResponse> {\n  return client\n    .url(\"/terms\")\n    .get()\n    .json();\n}\n\nexport function getCourses(term: string): Promise<CoursesResponse> {\n  return client\n    .url(`/terms/${term}`)\n    .get()\n    .json();\n}\n\nexport function getCourse(term: string, course: string): Promise<CourseReponse> {\n  return client\n    .url(`/terms/${term}/${course}`)\n    .get()\n    .json();\n}\n\nexport function postSubmission(captcha: string, email: string, sections: string[]) {\n  return client\n    .url('/submit')\n    .post({\n      captcha,\n      email,\n      sections,\n    })\n    .json();\n}","import React from \"react\";\n\ninterface Props {\n  label: string;\n  type: string;\n  value?: string;\n  placeholder?: string;\n  onChange?: Function;\n  required?: boolean;\n}\n\n\nexport default function Input({label, type, value, placeholder, onChange, required}: Props) {\n  return (\n    <div className=\"field is-horizontal\">\n      <div className=\"field-label is-normal\">\n        <label className=\"label\">{label}</label>\n      </div>\n      <div className=\"field-body\">\n        <div className=\"field\">\n          <p className=\"control\">\n            <input\n              className=\"input\"\n              type={type}\n              onChange={(e) => onChange ? onChange(e.target.value) : null}\n              placeholder={placeholder}\n              value={value}\n              required={required}\n            />\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport Select, { Option } from \"./components/Select\";\nimport { getTerms, getCourses, getCourse, postSubmission } from \"./data/api\";\nimport { CourseMap, CourseComponentMap } from \"./data/responses\";\nimport Input from \"./components/Input\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\ninterface Notification {\n  color?: string;\n  message?: string;\n  open: boolean;\n}\n\nconst MAX_SECTIONS = 6;\n\n// Default key is ReCaptcha test key\nconst RECAPTCHA_KEY = process.env.REACT_APP_RECAPTCHA_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n\nfunction App() {\n  const [coursesData, setCoursesData] = useState<CourseMap>({});\n  const [termsData, setTermsData] = useState<Option[]>([]);\n  const [componentData, setComponentData] = useState<CourseComponentMap>({});\n  const [term, setTerm] = useState(\"\");\n  const [course, setCourse] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [captcha, setCaptcha] = useState<string|null>(\"\");\n  const [selectedSections, setSelectedSections] = useState<string[]>([]);\n  const [notification, setNotification] = useState<Notification>({\n    color: \"\",\n    message: \"\",\n    open: false,\n  });\n\n  useEffect(() => {\n    getTerms()\n      .then(data => {\n        setTermsData(data.data.sort().map((i: string) => ({value: i, text: i})));\n      })\n  }, []);\n\n  useEffect(() => {\n    if (term === \"\") {\n      setCoursesData({});\n      return setComponentData({});\n    }\n    getCourses(term)\n      .then(data => {\n        setCoursesData(data.data);\n        if (!data.data[course]) {\n          setCourse(\"\");\n        } else {\n          loadComponents();\n        }\n      })\n      .catch(data => {\n        setNotification({\n          color: \"danger\",\n          message: data.error,\n          open: true,\n        });\n      });\n  }, [term]);\n\n  useEffect(() => {\n    if (course === \"\") return setComponentData({});\n    loadComponents();\n  }, [course]);\n\n  function loadComponents() {\n    getCourse(term, course)\n      .then(data => {\n        setComponentData(data.data.components);\n      })\n      .catch(data => {\n        setNotification({\n          color: \"danger\",\n          message: data.error,\n          open: true,\n        });\n      });\n  }\n\n  function submit(e: React.FormEvent) {\n    e.preventDefault();\n\n    if (!email || selectedSections.length === 0) return setNotification({\n      message: \"No classes selected.\",\n      color: \"danger\",\n      open: true,\n    });\n    \n    if (!captcha) return setNotification({\n      message: \"Please complete captcha\",\n      color: \"danger\",\n      open: true,\n    });\n\n    postSubmission(captcha, email, selectedSections)\n      .then(() => {\n        setSelectedSections([]);\n        setEmail(\"\");\n        setNotification({\n          color: \"success\",\n          message: \"Success! We will keep your details for 14 days and will notify you if a class becomes available.\",\n          open: true,\n        });\n      }).catch(data => {\n        setNotification({\n          color: \"danger\",\n          message: data.error,\n          open: true,\n        });\n      });;\n  }\n\n  function handleSelection(section: string) {\n    return () => {\n      if (selectedSections.includes(section)) {\n        setSelectedSections(selectedSections.filter(s => s !== section));\n        return;\n      }\n      if (selectedSections.length === MAX_SECTIONS)\n        return alert(`You are only allowed to select a maximum of ${MAX_SECTIONS} sections.`);\n      setSelectedSections(selectedSections.concat(section));\n    }\n  }\n\n  return (\n    <div className=\"container\" id=\"app\">\n      <p>\n        Missed your perfect tute because it was taken by someone else? Classful will let\n        you know when someone drops out of that class so that you can enrol!\n      </p>\n      {notification.open && <div className={`notification is-${notification.color}`}>\n        {notification.message}\n        <span className=\"delete\" onClick={() => setNotification({open: false})}></span>\n      </div>}\n      <h2 className=\"title is-2 is-center\">Selection</h2>\n      <p>\n        <b>Selected Sections: </b>\n        {selectedSections.map((s) => (\n          <span className=\"selected-session\" onClick={handleSelection(s)}>{s}</span>\n        ))}\n      </p>\n      <br />\n\n      <Select\n        options={termsData}\n        defaultOption={{value: \"\", text: \"Select Term\"}}\n        onChange={setTerm} \n      />\n      <Select \n        options={Object.keys(coursesData).map((c) => ({\n          value: c,\n          text: `${c} - ${coursesData[c]}`\n        }))}\n        onChange={setCourse}\n        defaultOption={{value: \"\", text: \"Select Course\"}}\n      />\n      <div>\n        {Object.keys(componentData).length > 0 && <table className=\"table is-fullwidth\" id=\"tbl-sections\">\n          <thead>\n            <tr>\n              <th>Code</th>\n              <th>Type</th>\n              <th>Status</th>\n              <th>Capacity</th>\n              <th>Times</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(componentData).sort().map(c => (\n              <tr\n                key={c}\n                className={selectedSections.includes(`${term}_${course}_${c}`) ? \"selected\" : \"\"}\n                onClick={handleSelection(`${term}_${course}_${c}`)}\n              >\n                <td>{c}</td>\n                <td>{componentData[c].cmp_type}</td>\n                <td>{componentData[c].status}</td>\n                <td>{componentData[c].filled}/{componentData[c].maximum}</td>\n                <td>{componentData[c].times}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>}\n      </div>\n      <br />\n\n      <h2 className=\"title is-2 is-center\">Notification</h2>\n      <form onSubmit={submit}>\n        <Input\n          type=\"email\"\n          label=\"Email Address\"\n          value={email}\n          placeholder=\"example@unsw.edu.au\"\n          onChange={setEmail}\n          required={true}\n        />\n        <div style={{\n          textAlign: \"center\"\n        }}>\n          <div className=\"recaptcha\">\n            <ReCAPTCHA\n              sitekey={RECAPTCHA_KEY}\n              onChange={setCaptcha}\n              onExpired={() => setCaptcha(\"\")}\n            />\n          </div>\n        </div>\n        <button className=\"button is-primary is-fullwidth is-large\">Submit!</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport App from \"./App\";\n\nexport default function Page() {\n    return (\n        <>\n            <div className=\"navbar\">\n                <span className=\"brand\">Classful</span>\n            </div>\n            <App />\n            <footer>\n                <p>\n                    Made with &hearts; by <a href=\"https://tomn.me\">@lecafard</a><br/>\n                    Heavily inspired by <a href=\"https://tutorifull.chybby.com/\">Tutorifull</a><br/>\n                    <a href=\"https://github.com/lecafard/classful\">Source</a>\n                </p>\n            </footer>\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from \"./Page\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Page />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}